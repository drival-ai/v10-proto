{
  "swagger": "2.0",
  "info": {
    "title": "V10 API reference",
    "description": "Drival AI's **V10** API is a RESTful API that can be accessed by an HTTP client such as `curl`, or any HTTP library which is part of most modern programming languages. This API reference is autogenerated from [protocol buffers](https://developers.google.com/protocol-buffers) defined in this [repository](https://github.com/drival-ai/v10-proto).\n\nSome endpoints, especially those that return lists of resources, have streaming responses; newline-separated stream of “chunks”. Each chunk is an envelope that can contain either a response message or an error. Only the last chunk will include an error, if any.",
    "version": "alpha"
  },
  "tags": [
    {
      "name": "V10",
      "description": "(ALPHA) V10 API. Base URL: https://api.drival.ai",
      "externalDocs": {
        "description": "See here for the service definition.",
        "url": "https://github.com/drival-ai/v10-proto/tree/main/v10/v1"
      }
    },
    {
      "name": "Iam",
      "description": "(ALPHA) IAM API. Base URL: https://api.drival.ai",
      "externalDocs": {
        "description": "See here for the service definition.",
        "url": "https://github.com/drival-ai/v10-proto/tree/main/iam/v1"
      }
    },
    {
      "name": "Operations",
      "description": "(ALPHA) Operations API. Base URL: https://api.drival.ai",
      "externalDocs": {
        "description": "See here for the service definition.",
        "url": "https://github.com/drival-ai/v10-proto/tree/main/operations/v1"
      }
    }
  ],
  "host": "api.drival.ai",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v10/iam/v1/login": {
      "post": {
        "summary": "Login an account.",
        "operationId": "Iam_Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request message for the Login rpc.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LoginRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/v10/iam/v1/register": {
      "post": {
        "summary": "Register an account.",
        "operationId": "Iam_Register",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RegisterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request message for the Register rpc.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RegisterRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/v10/iam/v1/whoami": {
      "get": {
        "summary": "Testing endpoint.",
        "operationId": "Iam_WhoAmI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WhoAmIResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      }
    },
    "/v10/ops/v1": {
      "get": {
        "summary": "List long-running operations.",
        "operationId": "Operations_ListOperations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListOperationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "nextToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/v10/ops/v1/{name}": {
      "get": {
        "summary": "Get a long-running operation.",
        "operationId": "Operations_GetOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v10prototypesOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      },
      "delete": {
        "summary": "Delete a long-running operation.",
        "operationId": "Operations_DeleteOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/v10/ops/v1/{name}:cancel": {
      "post": {
        "summary": "Cancel a long-running operation.",
        "operationId": "Operations_CancelOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationsCancelOperationBody"
            }
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/v10/v1:do": {
      "post": {
        "summary": "Testing endpoint.",
        "operationId": "V10_Do",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request message for the Do rpc.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DoRequest"
            }
          }
        ],
        "tags": [
          "V10"
        ]
      }
    },
    "/v10/vehicle/list": {
      "get": {
        "summary": "List vehicles owned by the user.",
        "operationId": "V10_ListVehicles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListVehiclesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "V10"
        ]
      }
    },
    "/v10/vehicle/register": {
      "post": {
        "summary": "Vehicle manual registration endpoint.",
        "operationId": "V10_RegisterVehicle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request message for the RegisterVehicle rpc.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RegisterVehicleRequest"
            }
          }
        ],
        "tags": [
          "V10"
        ]
      }
    },
    "/v10/vehicle/{id}": {
      "delete": {
        "operationId": "V10_DeleteVehicle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required. Vehicle id.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "V10"
        ]
      }
    }
  },
  "definitions": {
    "OperationsCancelOperationBody": {
      "type": "object",
      "description": "Request message for the CancelOperation rpc."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "v10prototypesOperation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`."
        },
        "metadata": {
          "$ref": "#/definitions/protobufAny",
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
        },
        "error": {
          "$ref": "#/definitions/rpcStatus",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "$ref": "#/definitions/protobufAny",
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`."
        }
      },
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call."
    },
    "v1DoRequest": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        }
      },
      "description": "Request message for the Do rpc."
    },
    "v1DoResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        }
      },
      "description": "Response message for the Do rpc."
    },
    "v1ListOperationsResponse": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v10prototypesOperation"
          }
        },
        "nextToken": {
          "type": "string"
        }
      },
      "description": "Response message for the ListOperations rpc."
    },
    "v1ListVehiclesResponse": {
      "type": "object",
      "properties": {
        "vehicles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Vehicle"
          },
          "description": "Either chassis number or vin must be provided."
        }
      },
      "description": "Response message for the ListVehicles rpc."
    },
    "v1LoginRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "description": "Request message for the Login rpc."
    },
    "v1LoginResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/rpcStatus"
        }
      },
      "description": "Response message for the Login rpc."
    },
    "v1RegisterRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "description": "Request message for the Register rpc."
    },
    "v1RegisterResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/rpcStatus"
        }
      },
      "description": "Response message for the Register rpc."
    },
    "v1RegisterVehicleRequest": {
      "type": "object",
      "properties": {
        "vehicle": {
          "$ref": "#/definitions/v1Vehicle",
          "description": "Either chassis number or vin must be provided."
        }
      },
      "description": "Request message for the RegisterVehicle rpc."
    },
    "v1Vehicle": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "chassisNumber": {
          "type": "string"
        },
        "vin": {
          "type": "string"
        },
        "make": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "kilometers": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Vehicle message definition."
    },
    "v1WhoAmIResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        }
      },
      "description": "Request message for the WhoAmI rpc."
    }
  }
}
