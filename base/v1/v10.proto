syntax = "proto3";

package v10proto.base.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/drival-ai/v10-go/base";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "V10 API reference";
    description: "Drival AI's **V10** API is a RESTful API that can be accessed by an HTTP client such as `curl`, or any HTTP library which is part of most modern programming languages. This API reference is autogenerated from [protocol buffers](https://developers.google.com/protocol-buffers) defined in this [repository](https://github.com/drival-ai/v10-proto).\n\nSome endpoints, especially those that return lists of resources, have streaming responses; newline-separated stream of “chunks”. Each chunk is an envelope that can contain either a response message or an error. Only the last chunk will include an error, if any.";
    version: "alpha";
  };
  host: "api.drival.ai";
  schemes: HTTPS;
};

// V10 service definition.
service V10 {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "(ALPHA) V10 API. Base URL: https://api.drival.ai"
    external_docs: {
      url: "https://github.com/drival-ai/v10-proto/tree/main/v10/v1";
      description: "See here for the service definition.";
    }
  };

  // Testing endpoint.
  rpc Do(DoRequest) returns (DoResponse) {
    option (google.api.http) = {
      post: "/v10/v1:do"
      body: "*"
    };
  }

  // Vehicle manual registration endpoint.
  rpc RegisterVehicle(RegisterVehicleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v10/vehicle/register"
      body: "*"
    };
  }

  // List vehicles owned by the user.
  rpc ListVehicles(ListVehiclesRequest) returns (stream Vehicle) {
    option (google.api.http) = {
      get: "/v10/vehicle/list"
    };
  }

  // Delete vehicle by VIN.
  rpc DeleteVehicle(DeleteVehicleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v10/vehicle/{vin}"
    };
  }

  // Update vehicle by VIN.
  rpc UpdateVehicle(UpdateVehicleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v10/vehicle/{vin}"
      body: "*"
    };
  }

  // Update user metadata by id.
  rpc UpdateUserMetadata(UpdateUserMetadataRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v10/usermetadata/{id}"
      body: "*"
    };
  }

  // Get user metadata by id.
  rpc GetUserMetadata(GetUserMetadataRequest) returns (GetUserMetadataResponse) {
    option (google.api.http) = {
      get: "/v10/usermetadata/{id}"
    };
  }

  // Start a trip.
  rpc StartTrip(StartTripRequest) returns (StartTripResponse) {
    option (google.api.http) = {
      post: "/v10/trip/start"
      body: "*"
    };
  }

  // Update trip by id.
  rpc UpdateTrip(UpdateTripRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v10/trip/{id}"
      body: "*"
    };
  }

  // End a trip.
  rpc EndTrip(EndTripRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v10/trip/end"
      body: "*"
    };
  }

  // List trips.  
  rpc ListTrips(ListTripsRequest) returns (stream Trip) {
    option (google.api.http) = {
      get: "/v10/trip/list"
    };
  }
}


// Vehicle message definition.
message Vehicle {
  string vin = 1;
  string make = 2;
  string model = 3;
  int32 year = 4;
  float kilometers = 5;
}

// Request message for the RegisterVehicle rpc. 
message RegisterVehicleRequest {
  Vehicle vehicle = 1;
}

// Request message for the RegisterVehicle rpc.
message ListVehiclesRequest {}


message DeleteVehicleRequest {
  // Required. Vehicle Identification Number (VIN) to delete.
  string vin = 1;
}

message UpdateVehicleRequest {
  // Required. Vehicle Identification Number (VIN) to update.
  string vin = 1;

  // Required. Vehicle data.
  Vehicle vehicle = 2;
}


message UserMetadata {
  string id = 1;
  string rank = 2;
  int32 points = 3;
}

message UpdateUserMetadataRequest {
  // Required. User ID to update.
  string id = 1;

  // Required. User metadata.
  UserMetadata userMetadata = 2;
}

message GetUserMetadataRequest {
  // Required. User ID to get.
  string id = 1;
}

message GetUserMetadataResponse {
  UserMetadata userMetadata = 1;
}

message StartTripRequest {
  // Required. Vehicle Identification Number (VIN) to be used for the trip.
  string vin = 1;

  // Required. Start time of the trip
  string startTime = 2;
}

message StartTripResponse {
  // Trip id.
  string id = 1;
}

message UpdateTripRequest {
  // Required. Trip ID to update.
  string id = 1;

  // Required. Trip data.
  Trip trip = 2;
}

message Trip {
  string id = 1;
  string vin = 2;
  string startTime = 3;
  string endTime = 4;
  float distance = 5;
  int32 points = 6;

  // Base64 ecncoded image of the map snapshot.
  string mapSnapshot = 7;
}

message EndTripRequest {
  // Required. Trip ID to end.
  string id = 1;

  // Required. Total distance in meters
  float distance = 2;

  // Required. Total points earned.
  int32 points = 3;

  // Required. End time of the trip.
  string endTime = 4;

  // Required. Base64 encoded image of the map snapshot.
  string mapSnapshot = 5;

  // Required. Vehicle Identification Number (VIN) used for the trip.
  string vin = 6;
}

message ListTripsRequest {}


// Request message for the Do rpc.
message DoRequest {
  string data = 1;
}

// Response message for the Do rpc.
message DoResponse {
  string data = 1;
}
